#!/bin/bash

create_and_activate()
{
    # create and ENTER target environment
    conda_env_create
    conda activate "$env"

    # remove 'defaults' for to enforce consistency
    conda config --env --remove channels defaults
}

set_compiler_env()
{
    # refresh current environment
    local current_env="$CONDA_DEFAULT_ENV"
    conda deactivate
    conda activate "$current_env"

    # NOTE: the compiler options here are pulled straight from the Python Makefile
    if [[ $linux ]]; then
        export LDSHARED="$CC -shared"
    elif [[ $macos ]]; then
        export LDSHARED="$CC -bundle -undefined dynamic_lookup"
    fi
}

install_cross_compilers()
{
    if [[ -z $compilers_installed ]]; then
        echo "$info" "installing cross-compilers..."
        
        # install cross compilers
        local pkgs=("$cc_pkg" "$cxx_pkg" "$gfortran_pkg")
        local pkg_diff="$(conda install --override-channels -c anaconda ${pkgs[@]} --no-update-deps --json --quiet)"
        local install_error="$(echo "$pkg_diff" | jq -r '.error')"
        if [[ $install_error != "null" ]]; then
            >&2 echo -e "$error" "$install_error"
            exit 1
        fi

        # filter out only packages than were added, NOT updated/downgraded
        local actions="$(echo "$pkg_diff" | jq '.actions')"
        [[ $actions != "null" ]] &&
            local link="$(echo "$actions" | jq '.LINK')"
        [[ $actions != "null" ]] &&
            local unlink="$(echo "$actions" | jq '.UNLINK')"
        [[ $link ]] && [[ $link != "null" ]] &&
            local add="$(echo "$link" | jq '[.[].name]')"
        [[ $unlink ]] && [[ $unlink != "null" ]] &&
            local sub="$(echo "$unlink" | jq '[.[].name]')"
        [[ $add ]] &&
            tmp_pkgs="$add"
        [[ $add ]] && [[ $sub ]] &&
            tmp_pkgs="$(echo "{\"add\": $add, \"sub\": $sub}" | jq '.add-.sub')"

        if [[ $tmp_pkgs ]]; then
            lib_pkgs="$(echo $tmp_pkgs | jq -r '.[]' | grep "^lib")"
            tmp_pkgs="$(echo $tmp_pkgs | jq -r '.[]' | grep -v "^lib")"
        fi

        set_compiler_env
        compilers_installed=true
    fi
}

uninstall_cross_compilers()
{
    if [[ $compilers_installed ]] && [[ $tmp_pkgs ]]; then
        echo "$info" "uninstalling cross-compilers..."
        conda uninstall ${tmp_pkgs[@]} --force --yes $quiet $log_quiet
        unset compilers_installed
    fi
}

install_lib_pkgs()
{
    if [[ $lib_pkgs ]] && [[ ${#lib_pkgs[@]} -gt 0 ]]; then
        echo "$info" "installing cross-compiler library packages..."
        conda install --override-channels -c anaconda ${lib_pkgs[@]} --no-update-deps --yes $quiet $log_quiet
    fi
}

set_pip_local_install()
{
    mkdir -p "$PIP_CACHE_DIR/wheels"  # <-- suppress warning for missing directory
    export PIP_ONLY_BINARY=":all:"
    export PIP_FIND_LINKS="$(find "$PIP_CACHE_DIR/wheels" -name *.whl)"

    # turn off pip verbosity since the messages will be redundant
    [[ $PIP_QUIET ]] && pip_quiet="$PIP_QUIET"
    export PIP_QUIET=1
}

unset_pip_local_install()
{
    unset PIP_ONLY_BINARY
    unset PIP_FIND_LINKS

    # restore PIP_QUIET
    if [[ $pip_quiet ]]; then
        export PIP_QUIET="$pip_quiet"
    fi
}

install_pip()
{
    if [[ $(conda list --json | jq -r '.[].name' | grep "^pip$" | wc -l) -eq 0 ]]; then
        echo "$info" "pip is missing from conda environment, installing..."
        conda install --override-channels -c anaconda pip --no-update-deps --yes $quiet $log_quiet
    fi
}

set_poetry_config()
{
    venvs_create="$(poetry config settings.virtualenvs.create)"  # <-- save previous value
    poetry config settings.virtualenvs.create "false"
}

restore_poetry_config()
{
    if [[ $venvs_create ]]; then
        poetry config settings.virtualenvs.create "$venvs_create"
        unset venvs_create
    fi
}

make_temp()
{
    temp_dir=$(mktemp -d)
    temp_file="$temp_dir/$env.tar.gz"
    temp_created=true
}

remove_temp()
{
    if [[ $temp_created ]]; then
        rm -rf "$temp_dir"
        unset temp_created
    fi
}

run_post_setup()
{
    if [[ $post_setup ]]; then
        local current_env="$CONDA_DEFAULT_ENV"
        echo "$info" "running post-setup script..."
        conda deactivate
        bash "$src_dir/launch" "$env" "$post_setup"
        conda activate "$current_env"
    fi
}

exit_trap()
{
    restore_poetry_config
    remove_temp
}

complete_msg()
{
    if [[ $poetry_dir ]]; then
        local poetry_lockfile="$name/$dep_name/$poetry_lock"
    else
        local poetry_lockfile="NOT_APPLICABLE"
    fi

    # NOTE: if you update this print message, please update README.md
    if [[ $create ]]; then
        echo "$info" "Complete! Environment is now installed in '$output'"
        echo "$help" "[Instructions]"
        echo "$____"
        echo "$____" "  Normal Use:"
        echo "$____" "    *  activate             --> source $output/bin/activate"
        echo "$____" "    *  deactivate           --> source deactivate"
        echo "$____"
        echo "$____" "  If in 'envs' folder:"
        echo "$____" "    *  activate             --> conda activate $name"
        echo "$____" "    *  deactivate           --> conda deactivate"
    else
        echo "$info" "Complete! Environment is now packaged at '$output'"
        echo "$help" "[Instructions]"
        echo "$____"
        echo "$____" "  Initial Setup:"
        echo "$____" "    1. untar archive        --> tar -xf $output_file"
        echo "$____" "    2. activate environment --> source $name/bin/activate"
        echo "$____" "    3. fix path prefixes    --> conda unpack"
        echo "$____"
        echo "$____" "  Normal Use:"
        echo "$____" "    *  activate             --> source $name/bin/activate"
        echo "$____" "    *  deactivate           --> source deactivate"
    fi
    echo     "$____"
    echo     "$____" "  Info:"
    echo     "$____" "    *  conda dependencies     @ $name/$dep_name/$dep_file"
    echo     "$____" "    *  poetry lockfile        @ $poetry_lockfile"
}

usage()
{
    # NOTE: if you update this print message, please update README.md
    echo     "$help" "usage: $script_name --name PROJECT [--file FILE]..."
    if [[ $create ]]; then
        echo "$____" "       $___________ [--poetry DIR] [--output DIR]"
    else
        echo "$____" "       $___________ [--poetry DIR] [--version VERSION] [--output DIR]"
    fi
    echo     "$____" "       $___________ [--post-setup SCRIPT] [--no-dev] [--unlock]"
    echo     "$____" "       $___________ [--force] [--color] [--no-color] [--quiet]"
    echo     "$____" "       $___________ [--help]"
}

advanced_usage()
{
    
    # NOTE: if you update this print message, please update README.md
    usage
    echo     "$____"
    if [[ $create ]]; then
        local output="folder"
        echo "$____" "Create a conda environment from the given dependencies"
    else
        local output="tarball"
        echo "$____" "Package all dependencies into a portable conda environment tarball"
    fi
    echo     "$____"
    
    echo     "$____" "required arguments:"
    echo     "$____" "  --name, -n PROJECT        Name of the project. Will be used for the name in"
    echo     "$____" "                            the output $output."
    echo     "$____"
    echo     "$____" "optional arguments:"
    echo     "$____" "  --file, -f FILE           Conda environment file. This option can be used"
    echo     "$____" "                            multiple times to specify multiple files. The"
    echo     "$____" "                            environment will be updated in the order that they"
    echo     "$____" "                            are given on the command line."
    echo     "$____" "  --poetry, -p DIR          Poetry project directory."
    if [[ -z $create ]]; then
        echo "$____" "  --version, -v VERSION     Version number to be included in output $output."
    fi
    echo     "$____" "  --output, -o DIR          Directory where the final $output will go."
    echo     "$____" "                            Otherwise, $output will be ouputed to the current"
    echo     "$____" "                            working directory."
    echo     "$____" "  --post-setup SCRIPT       Script to run after the environment is setup."
    echo     "$____" "  --no-dev                  Do not install dev dependencies for Poetry."
    echo     "$____" "  --unlock                  Update Poetry dependencies and overwrite lockfile."
    echo     "$____" "  --force                   Overwrite any existing $output at the output path."
    echo     "$____" "  --color                   Force colored output."
    echo     "$____" "  --no-color                Disable colored output."
    echo     "$____" "  --quiet, -q               Suppress output for commands."
    echo     "$____" "  --help, -h                Show this help message then exit."
}

opt_twice_err()
{
    >&2 echo "$error" "'$1' option cannot be used more than once"
    >&2 usage
    exit 1
}

missing_val_err()
{
    >&2 echo "$error" "'$1' option requires a value"
    >&2 usage
    exit 1
}

files=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--name)
            [[ $name ]] && opt_twice_err "--name"
            [[ -z $2 ]] && missing_val_err "--name"
            name="$2"
            shift # past argument
            shift # past value
            ;;
        -f|--file)
            files+=("$2")
            shift # past argument
            shift # past value
            ;;
        -p|--poetry)
            [[ $poetry_dir ]] && opt_twice_err "--poetry"
            [[ -z $2 ]] && missing_val_err "--poetry"
            poetry_dir="$2"
            shift # past argument
            shift # past value
            ;;
        -v|--version)
            [[ $version ]] && opt_twice_err "--version"
            [[ -z $2 ]] && missing_val_err "--version"
            version="$2"
            shift # past argument
            shift # past value
            ;;
        -o|--output)
            [[ $output_dir ]] && opt_twice_err "--output"
            [[ -z $2 ]] && missing_val_err "--output"
            output_dir="$2"
            shift # past argument
            shift # past value
            ;;
        --post-setup)
            [[ $post_setup ]] && opt_twice_err "--post-setup"
            [[ -z $2 ]] && missing_val_err "--post-setup"
            post_setup="$2"
            shift # past argument
            shift # past value
            ;;
        --no-dev)
            no_dev="$1"
            shift # past argument
            ;;
        --unlock)
            unlock=true
            shift # past argument
            ;;
        --force)
            force="$1"
            shift # past argument
            ;;
        --color)
            shift # past argument
            ;;
        --no-color)
            shift # past argument
            ;;
        -q|--quiet)
            quiet="$1"
            export PIP_QUIET=1
            shift # past argument
            ;;
        -h|--help)
            advanced_usage
            exit 0
            ;;
        *)
            >&2 echo "$error" "'$1' not a recognized option"
            >&2 usage
            exit 1
            ;;
    esac
done

# check for required options
if [[ -z $name ]]; then
    >&2 echo "$error" "'--name' option is required"
    >&2 usage
    exit 1
fi

# make sure environment files exist
for file in ${files[@]}; do
    if [[ ! -f $file ]]; then
        >&2 echo "$error" "'$file' is either not a file or it doesn't exist"
        >&2 usage
        exit 1
    fi
done

# set full output path
if [[ -z $output_dir ]]; then
    output_dir="$(pwd)"
fi
if [[ ! -d $output_dir ]]; then
    >&2 echo "$error" "'$output_dir' is not a directory or does not exist"
    exit 1
fi

# set other output variables
output_dir="$(readlink -e "$output_dir")"  # <-- set to absolute path
if [[ $create ]]; then 
    output="$output_dir/$name"
else
    output_name="$name"
    if [[ $version ]]; then
        if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            >&2 echo "$warning" "'$version' does not match numerical format X.Y.Z"
        fi
        output_name+="-$version"
    fi
    output_file="$output_name.tar.gz"
    output="$output_dir/$output_file"
fi

if [[ -z $force ]]; then
    if [[ $create ]]; then
        if [[ -f $output ]] || [[ -d $output ]]; then
            >&2 echo "$error" "output folder '$output' already exists; use --force option to overwrite"
            exit 1
        fi
    else
        if [[ -f $output ]] || [[ -d $output ]]; then
            >&2 echo "$error" "output file '$output' already exists; use --force option to overwrite"
            exit 1
        fi
    fi
fi

# exit as soon as a command fails and print error
trap err_trap  ERR SIGINT SIGTERM SIGKILL
trap exit_trap EXIT

conda_initiate

# set pip cache directory
set_pip_cache_dir
echo "$info" "using pip cache directory '$PIP_CACHE_DIR'"

pip_files=()

# scan for pip dependencies
for file in ${files[@]}; do
    # warn user for pip dependencies
    if [[ $(cat "$file" | egrep "^\s*-\s+pip:\s*$" | wc -l) -gt 0 ]]; then
        >&2 echo "$warning" "found pip dependencies in '$file'; this is not recommended!"
        pip_files+=("$file")
    fi
done

if [[ ${#pip_files[@]} -gt 0 ]]; then
    pip_install="${bold}[${yellow}pip-install${reset}${bold}]${reset}"
    echo "$info" "pip dependencies were found in ${#pip_files[@]} file(s): running $pip_install..."

    # change logging for pip_install
    set_logging "$default_tag $pip_install"

    remove_old_env

    # create and ENTER target environment
    create_and_activate

    install_cross_compilers

    # update the environment
    for file in ${pip_files[@]}; do
        conda_env_update
    done

    # EXIT target environment and setup pip to only use local wheels
    conda deactivate
    set_pip_local_install

    echo "$info" "Complete!"

    # revert logging back to default settings
    set_logging "$default_tag"
fi

remove_old_env
unset compilers_installed

# create and ENTER target environment
create_and_activate

# update the environment 
for file in ${files[@]}; do
    conda_env_update
done

# setup dependencies info output
dep_name="dependencies"
dep_dir="$CONDA_PREFIX/$dep_name"
dep_file="$name.yml"
poetry_lock="poetry.lock"
mkdir -p "$dep_dir"

# install pip packages in target environment
if [[ $poetry_dir ]]; then
    poetry_install="${bold}[${green}poetry-install${reset}${bold}]${reset}"
    echo "$info" "Poetry project specified in '$poetry_dir': running $poetry_install..."

    # change logging for poetry_install
    set_logging "$default_tag $poetry_install"
   
    poetry_dir="$(readlink -e "$poetry_dir")"  # <-- set to absolute path
    unset_pip_local_install
    install_pip
    install_cross_compilers
    set_poetry_config

    # TODO: remove this when Poetry is more capable (see README)
    # set Poetry environment to yield independent cache
    export XDG_CACHE_HOME="$CONDA_PREFIX/xdg_cache"

    # install pip packages
    echo "$info" "installing pip packages via Poetry..."
    cd "$poetry_dir"
    if [[ $unlock ]]; then
        poetry update $no_dev $quiet $ansi $no_ansi
    else
        poetry install $no_dev $quiet $ansi $no_ansi
    fi
    cp "$poetry_lock" "$dep_dir"
    cd -

    restore_poetry_config

    # TODO: remove this when Poetry is more capable (see README)
    # remove cache and revert environment
    rm -rf "$XDG_CACHE_HOME"
    unset XDG_CACHE_HOME

    echo "$info" "Complete!"

    # revert logging back to default settings
    set_logging "$default_tag"
fi

# run post-setup
[[ $post_setup ]] && install_cross_compilers
run_post_setup
uninstall_cross_compilers

# install library packages from cross-compilers
install_lib_pkgs

# export environment to .yml file
unset PIP_QUIET  # <-- only for conda env export
echo "$info" "exporting pinned dependencies to '$dep_file'..."
conda env export | grep -v "^prefix: " | grep -v "^$" > "$dep_dir/$dep_file"

# run conda-pack to package the environment (or create)
if [[ $create ]]; then
    echo "$info" "packaging environment via conda-pack..."
    make_temp
    conda pack -o "$temp_file" -d "$output" --arcroot "$name" --compress-level 0 $force $quiet $log_quiet
    cd "$output_dir"
    echo "$info" "unpacking environment..."
    [[ $force ]] && rm -rf "$output"
    tar -xf "$temp_file"
    remove_temp
    cd -
else
    echo "$info" "packaging environment via conda-pack..."
    conda pack -o "$output" --arcroot "$name" $force $quiet $log_quiet
fi

complete_msg
