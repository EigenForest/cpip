#!/bin/bash

# store script name and empty string equivalent
script_name="$(basename -- "$0")"
script_dir="$(dirname -- "$0")"
src_dir="$script_dir/../src"
set_space()
{
    space="$(len=${#1}; ch=' '; printf '%*s' "$len" | tr ' ' "$ch")"
}
set_script_space()
{
    set_space "$script_name"
    ___________="$space"
}
set_script_space

set_colors()
{
    bold=`tput bold`
    red=`tput setaf 1`
    green=`tput setaf 2`
    yellow=`tput setaf 3`
    blue=`tput setaf 4`
    magenta=`tput setaf 5`
    cyan=`tput setaf 6`
    reset=`tput sgr0`
}

min_args=0
for arg in $@; do
    if [[ $arg == "--no-color" ]]; then
        no_color=true
        ((++min_args))
    fi
    if [[ $arg == "--color" ]]; then
        color=true
        ((++min_args))
    fi
done

if [[ ! -t 1 ]]; then
    # set quiet logging for everything but Poetry
    log_quiet="--quiet"
    export PIP_QUIET=1

    # turn off colored output by default
    no_color=true
    if [[ $color ]]; then
        unset no_color
    fi
fi

if [[ $no_color ]]; then
    export PIP_NO_COLOR=1
    no_ansi="--no-ansi"
else
    ansi="--ansi"
    set_colors
fi

# set print commands
default_tag="${bold}${magenta}[${cyan}$script_name${magenta}]${reset}"

# store empty string equivalent of 'info' and 'help'
four_space="[$script_name] FOUR:"
set_space "$four_space"
____="$space"

set_logging()
{
    local tag="$1"
    info="$tag ${green}INFO:${reset}"
    warning="$tag ${yellow}WARNING:${reset}"
    error="$tag ${red}ERROR:${reset}"
    help="$tag ${blue}HELP:${reset}"
}

set_logging "$default_tag"

# check os to find the right cross compilers
if [[ $OSTYPE == "linux-gnu" ]]; then
    cc_pkg="gcc_linux-64"
    cxx_pkg="gxx_linux-64"
    gfortran_pkg="gfortran_linux-64"
    linux=true
elif [[ $OSTYPE == "darwin"* ]]; then
    cc_pkg="clang_osx-64"
    cxx_pkg="clangxx_osx-64"
    gfortran_pkg="gfortran_osx-64"
    macos=true
else
    >&2 echo "$error" "OS not supported!"
    exit 1
fi

env="cpip_env"

conda_initiate()
{
    source "$CONDA_PREFIX/etc/profile.d/conda.sh"
}

conda_env_create()
{
    echo "$info" "creating environment..."
    conda create -n "$env" --yes $quiet $log_quiet
}

conda_env_update()
{
    echo "$info" "updating environment with '$file' file..."
    conda env update -n "$env" -f "$file" $quiet $log_quiet
}

conda_env_remove()
{
    echo "$info" "removing environment..."
    conda env remove -n "$env" --yes $quiet $log_quiet
}

remove_old_env()
{
    if [[ $(conda env list | grep "^$env " | wc -l) -gt 0 ]]; then
        echo "$info" "found old environment, removing..."
        conda_env_remove
    fi
}

set_pip_cache_dir()
{
    export PIP_CACHE_DIR="$CONDA_PREFIX/pip/cache"
}

exit_message()
{
    # this function must be used at the beginning of the exit trap
    local lc="$BASH_COMMAND" rc=$?
    if [[ $rc -ne 0 ]]; then
        >&2 echo "$error" "Encountered error during execution; exiting now!"
    fi
}

usage()
{
    # NOTE: if you update this print message, please update README.md
    echo "$help" "usage: $script_name <command> [options]"
    echo "$s___"
    echo "$s___" "Portable packaging for conda + pip environments"
    echo "$s___"
    echo "$s___" "commands:"
    echo "$s___" "  pack                      Package environment into a tarball."
    echo "$s___" "  create                    Create conda environment."
    echo "$s___" "  clean                     Cleanup conda and/or pip cache."
    echo "$s___"
    echo "$s___" "options:"
    echo "$s___" "  --color                   Force colored output."
    echo "$s___" "  --no-color                Disable colored output."
    echo "$s___" "  --help, -h                Show this help message then exit."
}

if [[ $# -le $min_args ]]; then
    usage
    exit 0
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        pack)
            script_name+=" $1"
            set_script_space
            shift # past argument
            source "$src_dir/cpip-pack"
            ;;
        create)
            script_name+=" $1"
            set_script_space
            shift # past argument
            create=true
            source "$src_dir/cpip-pack"
            ;;
        clean)
            script_name+=" $1"
            set_script_space
            shift # past argument
            source "$src_dir/cpip-clean"
            ;;
        --color)
            shift # past argument
            ;;
        --no-color)
            shift # past argument
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            >&2 echo "$error" "'$1' not a recognized command"
            >&2 usage
            exit 1
            ;;
    esac
done
